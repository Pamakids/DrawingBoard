<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark" width="1024" height="768"
		 clipAndEnableScrolling="true"
		 creationComplete="group1_creationCompleteHandler(event)"
		 xmlns:draw="views.draw.*">
	<fx:Script>
		<![CDATA[

			import com.greensock.TweenLite;

			import mx.events.FlexEvent;

			import spark.components.Group;

			import assets.game.GameAssets;

			import events.BrushEvent;

			import models.Config;
			import models.PasterManager;
			import models.TextureVO;

			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				brushArr=Config.brushArr;

				brushColorArr=Config.brushColorArr;
				colorPickerArr=Config.colorDataList;

				for (var i:int=0; i < brushArr.length; i++)
				{
					var s:String=brushArr[i];
					var cls:Class=GameAssets["img_brush_" + s];
					var img0:Image=new Image();
					img0.source=cls;
					img0.left=brushPosXArr[i];
					brushGroup.addElement(img0);
					img0.addEventListener(MouseEvent.CLICK, brush_clickHandler);
				}

				var arr:Array=GameAssets.colorImgList;
				for each (var c:Class in arr)
				{
					var img:Image=new Image();
					img.source=c;
					img.addEventListener(MouseEvent.CLICK, onColorClick);

					colorGroup.addElement(img);
				}

				doChangeColorPicker(Config.colorDataList[0])
				locateHalo(0);

				textureBar.addEventListener("textureSelected", onTextrueSelected);

				downBtn_clickHandler(null);
			}

			private var mPickerColorTransform:ColorTransform;

			private function doChangeColorPicker(color:uint):void
			{
				var r:Number, g:Number, b:Number

				r=((color >> 16) & 255) / 255.0;
				g=((color >> 8) & 255) / 255.0;
				b=(color & 255) / 255.0;
				if (!mPickerColorTransform)
					mPickerColorTransform=new ColorTransform();
				mPickerColorTransform.redMultiplier=r
				mPickerColorTransform.greenMultiplier=g
				mPickerColorTransform.blueMultiplier=b

				//			mColorPickerData.fillRect(mColorPickerData.rect, 0x0)
				//			mColorPickerData.draw(mColorPickerDataSource, null, mPickerColorTransform, null, null)
				colorPicker.transform.colorTransform=mPickerColorTransform
				doChange(brushArr[crtBrushIndex], color);
//				var cc:IComponent=mColopMap[color]
//				mColorHalo.x=cc.x
//				mColorHalo.y=cc.y
			}

			private var crtColor:int;
			private var crtBrush:String;

			private function doChange(brush:String, color:int):void
			{
				crtBrush=brush;
				crtColor=color;
				dispatchEvent(new BrushEvent(crtBrush, crtColor));
			}

			public function getBrush():BrushEvent
			{
				return new BrushEvent(crtBrush, crtColor);
			}

			protected function onColorClick(e:MouseEvent):void
			{
				var img:Image=e.currentTarget as Image;
				var index:int=colorGroup.getElementIndex(img);
				trace(index)

				var color:uint=colorPickerArr[index];
				brushColorArr[crtBrushIndex]=color;

				doChangeColorPicker(color);
				locateHalo(index);
			}

			protected function brush_clickHandler(e:MouseEvent):void
			{
				var crtImg:Image=e.currentTarget as Image;
				crtBrushIndex=brushGroup.getElementIndex(crtImg);
			}

			private var brushArr:Array;
//			=["eraser", "waterColor",
//				"crayon", "pink", "maker", "pencil"];

			private var brushPosXArr:Array=[91, 165, 261, 350, 425, 497];

			private function changeBrush():void
			{
				for (var i:int=0; i < brushGroup.numElements; i++)
				{
					var img:Image=brushGroup.getElementAt(i) as Image;
					TweenLite.killTweensOf(img);
					if (crtBrushIndex == i)
					{
						if (img.top != -30)
							TweenLite.to(img, .3, {y: 94 - img.height + 10});
					}
					else
					{
						if (img.top != 0)
							TweenLite.to(img, .3, {y: 0});
					}
				}
			}

			private function locateHalo(index:int):void
			{
				halo.x=colorGroup.x + (41 + colorGroup.horizontalGap) * (index % colorGroup.requestedColumnCount) - 4;
				halo.y=colorGroup.y + (41 + colorGroup.verticalGap) * int(index / colorGroup.requestedColumnCount) - 4;
			}

			protected function upBtn_clickHandler(event:MouseEvent):void
			{
				TweenLite.killTweensOf(topGroup);
				TweenLite.to(topGroup, .5, {top: 0});

				TweenLite.killTweensOf(bottomGroup);
				TweenLite.to(bottomGroup, .5, {bottom: 0});
				upBtn.visible=false;

				changeBrush();

			}

			protected function downBtn_clickHandler(event:MouseEvent=null):void
			{
				if (tl)
				{
					tl.kill();
					tl=null;
				}
				TweenLite.killTweensOf(topGroup);
				TweenLite.to(topGroup, .5, {top: -120});
				confirmIndex=-1;

				TweenLite.killTweensOf(bottomGroup);
				TweenLite.to(bottomGroup, .5, {bottom: -109});
				upBtn.visible=true;

				hideBrush();
			}

			public function playEnter():void
			{
				upBtn_clickHandler(null);
//				tl=TweenLite.delayedCall(1, downBtn_clickHandler);
			}

			private var _crtBrushIndex:int;

			public function get crtBrushIndex():int
			{
				return _crtBrushIndex;
			}

			public function set crtBrushIndex(value:int):void
			{
				_crtBrushIndex=value;

				changeBrush();

				var color:uint=brushColorArr[_crtBrushIndex];

				var index:int=colorPickerArr.indexOf(color);
				doChangeColorPicker(color);
				locateHalo(index);

				doChange(brushArr[_crtBrushIndex], color);
			}

			public var layer:Group;
			private var brushColorArr:Vector.<uint>;
			private var colorPickerArr:Array;

			private var tl:TweenLite;

			private function hideBrush():void
			{
				var img:Image=brushGroup.getElementAt(crtBrushIndex) as Image;
				TweenLite.killTweensOf(img);
				TweenLite.to(img, .3, {y: 0});
			}

			protected function pencil_btn_clickHandler(event:MouseEvent):void
			{
				isPencilDown=true;
				dispatchEvent(new Event("changeToDraw"));
			}

			protected function paster_btn_clickHandler(event:MouseEvent):void
			{
				isPencilDown=false;
				dispatchEvent(new Event("changeToTexture"));
			}

			[Bindable]
			private var isPencilDown:Boolean=true;

			protected function onTextrueSelected(event:Event):void
			{
				var item:TextureItem=new TextureItem();
				var cls:Class=PasterManager.getInstance().getPasterRefByIndex(textureBar.index);
				item.setSource(cls);
				layer.addElement(item);
				item.x=Math.random() * 1024;
				item.y=Math.random() * 768;
				item.index=textureBar.index;
			}

			public function getTextureData():Array
			{
				var arr:Array=[];
				for (var i:int=0; i < layer.numElements; i++)
				{
					var t:TextureItem=layer.getElementAt(i) as TextureItem;
					var o:TextureVO=TextureVO.clone(t);
					arr.push(o);
				}
				return arr;
			}

			protected function backClick(event:MouseEvent):void
			{
				if (confirmIndex == 0)
				{
					confirmIndex=-1;
				}
				else
				{
					confirmIndex=0;
					confirmBtn.source=GameAssets.game_Back;
					confirmBtn.x=22 + 11;
//					confirmBtn.y=112 + 4;
				}
			}

			protected function deleteClick(event:MouseEvent):void
			{
				if (confirmIndex == 1)
				{
					confirmIndex=-1;
				}
				else
				{
					confirmIndex=1;
					confirmBtn.source=GameAssets.game_Clear;
					confirmBtn.x=419 + 36+90;
//					confirmBtn.y=112 + 4;
				}
			}

			protected function confirmClick(event:MouseEvent):void
			{
				if (confirmIndex == 2)
				{
					confirmIndex=-1;
				}
				else
				{
					confirmIndex=2;
					confirmBtn.source=GameAssets.game_complete;

					confirmBtn.x=864 + 14;
//					confirmBtn.y=112 + 4;
				}
			}

			[Bindable]
			private var confirmIndex:int=-1;

			protected function confirmBtn_clickHandler(event:MouseEvent):void
			{
				var i:int=confirmIndex;
				confirmIndex=-1;
				switch (i)
				{
					case 0:
					{
						dispatchEvent(new Event("exitDraw"));
						break;
					}

					case 1:
					{
						dispatchEvent(new Event("clearDrawBorad"));
						break;
					}

					case 2:
					{
						dispatchEvent(new Event("saveDraw"));
						break;
					}

					default:
					{
						break;
					}
				}
			}

		]]>
	</fx:Script>
	<s:Group width="100%" id="topGroup" top="0">
		<s:Image id="confirmBtn" visible="{confirmIndex!=-1}"
				 click="confirmBtn_clickHandler(event)" top="110"/>

		<s:Image source="@Embed('assets/gallery/img/common/back.png')" left="42"
				 top="21" click="backClick(event)"/>
		<s:Group top="21" width="317" height="98" horizontalCenter="0">
			<s:Image source="@Embed('assets/game/btn/topBG.png')"/>
			<s:Image source="@Embed('assets/game/btn/back.png')" top="24" left="49" id="drawBackBtn"/>
			<s:Image source="@Embed('assets/game/btn/recover.png')"  top="24" horizontalCenter="0" id="drawRecoverBtn"/>
			<s:Image source="@Embed('assets/game/btn/delete.png')"  top="24" right="49" click="deleteClick(event)"/>
		</s:Group>
		<!--<s:Image source="{GameAssets.game_pre_trash}" left="463" top="21"
				 click="deleteClick(event)"/>-->
		<s:Image source="{GameAssets.game_pre_complete}" left="885" top="21"
				 click="confirmClick(event)"/>

	</s:Group>

	<s:Group width="100%" bottom="0" height="109" id="bottomGroup">
		<s:Image source="{GameAssets.bottomBg}"/>

		<s:Image id="upBtn" source="{GameAssets.btn_game_bottom_up}"
				 visible="false" right="25" bottom="109"
				 click="upBtn_clickHandler(event)"/>
		<s:Image id="downBtn" source="{GameAssets.btn_game_bottom_down}"
				 click="downBtn_clickHandler(event)" visible="{!upBtn.visible}"
				 right="25" bottom="109"/>

		<s:Image id="pencil_btn"
				 source="{isPencilDown?GameAssets.pen_selected:GameAssets.pen_unselected}"
				 left="22" top="10" click="pencil_btn_clickHandler(event)"/>
		<s:Image id="paster_btn"
				 source="{isPencilDown?GameAssets.paster_unselected:GameAssets.paster_selected}"
				 left="14" top="60" click="paster_btn_clickHandler(event)"/>

		<s:Group id="drawBar" visible="{isPencilDown}">
			<s:Group top="15" id="brushGroup" height="94">
			</s:Group>

			<s:Image id="colorPicker" source="{GameAssets.img_bigCircleB}"
					 left="606" top="7"/>

			<s:TileGroup left="724" top="6" id="colorGroup"
						 requestedColumnCount="6" verticalGap="14"
						 horizontalGap="10">

			</s:TileGroup>

			<s:Image source="{GameAssets.img_colorHalo}" mouseEnabled="false"
					 mouseChildren="false" id="halo"/>
		</s:Group>

		<draw:DrawTextureBar id="textureBar" visible="{!isPencilDown}" left="91"
							 right="0" height="109"/>

	</s:Group>
</s:Group>
