<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark" width="1024" height="768"
		 clipAndEnableScrolling="true"
		 creationComplete="group1_creationCompleteHandler(event)"
		 xmlns:draw="views.draw.*">
	<fx:Script>
		<![CDATA[

			import spark.components.Group;

			import com.greensock.TweenLite;

			import mx.events.FlexEvent;

			import assets.game.GameAssets;

			import models.Config;
			import models.PasterManager;

			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				for (var i:int=0; i < brushArr.length; i++)
				{
					var s:String=brushArr[i];
					var cls:Class=GameAssets["img_brush_" + s];
					var img0:Image=new Image();
					img0.source=cls;
					img0.left=brushPosXArr[i];
					brushGroup.addElement(img0);
					img0.addEventListener(MouseEvent.CLICK, brush_clickHandler);
				}

				var arr:Array=GameAssets.colorImgList;
				for each (var c:Class in arr)
				{
					var img:Image=new Image();
					img.source=c;
					img.addEventListener(MouseEvent.CLICK, onColorClick);

					colorGroup.addElement(img);
				}

				doChangeColorPicker(Config.colorDataList[0])
				locateHalo(0);

				textureBar.addEventListener("textureSelected", onTextrueSelected);
			}

			private var mPickerColorTransform:ColorTransform;

			private function doChangeColorPicker(color:uint):void
			{
				var r:Number, g:Number, b:Number

				r=((color >> 16) & 255) / 255.0;
				g=((color >> 8) & 255) / 255.0;
				b=(color & 255) / 255.0;
				if (!mPickerColorTransform)
					mPickerColorTransform=new ColorTransform();
				mPickerColorTransform.redMultiplier=r
				mPickerColorTransform.greenMultiplier=g
				mPickerColorTransform.blueMultiplier=b

				//			mColorPickerData.fillRect(mColorPickerData.rect, 0x0)
				//			mColorPickerData.draw(mColorPickerDataSource, null, mPickerColorTransform, null, null)
				colorPicker.transform.colorTransform=mPickerColorTransform

//				var cc:IComponent=mColopMap[color]
//				mColorHalo.x=cc.x
//				mColorHalo.y=cc.y
			}

			protected function onColorClick(e:MouseEvent):void
			{
				var img:Image=e.currentTarget as Image;
				var index:int=colorGroup.getElementIndex(img);
				trace(index)

				doChangeColorPicker(Config.colorDataList[index])
				locateHalo(index);
			}

			protected function brush_clickHandler(e:MouseEvent):void
			{
				var crtImg:Image=e.currentTarget as Image;
				crtBrushIndex=brushGroup.getElementIndex(crtImg);
				changeBrush();
			}

			private var brushArr:Array=["eraser", "waterColor",
				"crayon", "pink", "maker", "pencil"];

			private var brushPosXArr:Array=[91, 182, 261, 350, 425, 497];

			private function changeBrush():void
			{
				for (var i:int=0; i < brushGroup.numElements; i++)
				{
					var img:Image=brushGroup.getElementAt(i) as Image;
					TweenLite.killTweensOf(img);
					if (crtBrushIndex == i)
					{
						if (img.top != -30)
							TweenLite.to(img, .3, {y: 94 - img.height + 10});
					}
					else
					{
						if (img.top != 0)
							TweenLite.to(img, .3, {y: 0});
					}
				}
			}

			private function locateHalo(index:int):void
			{
				halo.x=colorGroup.x + (41 + colorGroup.horizontalGap) * (index % colorGroup.requestedColumnCount) - 4;
				halo.y=colorGroup.y + (41 + colorGroup.verticalGap) * int(index / colorGroup.requestedColumnCount) - 4;
			}

			protected function upBtn_clickHandler(event:MouseEvent):void
			{
				TweenLite.killTweensOf(bottomGroup);
				TweenLite.to(bottomGroup, .5, {bottom: 0});
				upBtn.visible=false;

				changeBrush();

			}

			protected function downBtn_clickHandler(event:MouseEvent):void
			{
				TweenLite.killTweensOf(bottomGroup);
				TweenLite.to(bottomGroup, .5, {bottom: -109});
				upBtn.visible=true;

				hideBrush();
			}

			private var crtBrushIndex:int=0;

			private var crtColorIndex:int=0;
			public var layer:Group;

			private function hideBrush():void
			{
				var img:Image=brushGroup.getElementAt(crtBrushIndex) as Image;
				TweenLite.killTweensOf(img);
				TweenLite.to(img, .3, {y: 0});
			}

			protected function pencil_btn_clickHandler(event:MouseEvent):void
			{
				isPencilDown=true;
			}

			protected function paster_btn_clickHandler(event:MouseEvent):void
			{
				isPencilDown=false;
			}

			[Bindable]
			private var isPencilDown:Boolean=true;

			protected function onTextrueSelected(event:Event):void
			{
				var item:TextureItem=new TextureItem();
				var cls:Class=PasterManager.getInstance().getPasterRefByIndex(textureBar.index);
				item.setSource(cls);
				layer.addElement(item);
				item.x=Math.random() * 1024;
				item.y=Math.random() * 768;
			}

		]]>
	</fx:Script>
	<s:Group width="100%">

	</s:Group>

	<s:Group width="100%" bottom="-109" height="109" id="bottomGroup">
		<s:Image source="{GameAssets.bottomBg}"/>

		<s:Image id="upBtn" source="{GameAssets.btn_game_bottom_up}"
				 visible="true" right="25" bottom="109"
				 click="upBtn_clickHandler(event)"/>
		<s:Image id="downBtn" source="{GameAssets.btn_game_bottom_down}"
				 click="downBtn_clickHandler(event)" visible="{!upBtn.visible}"
				 right="25" bottom="109"/>

		<s:Image id="pencil_btn"
				 source="{isPencilDown?GameAssets.pen_selected:GameAssets.pen_unselected}"
				 left="22" top="10" click="pencil_btn_clickHandler(event)"/>
		<s:Image id="paster_btn"
				 source="{isPencilDown?GameAssets.paster_unselected:GameAssets.paster_selected}"
				 left="14" top="60" click="paster_btn_clickHandler(event)"/>

		<s:Group id="drawBar" visible="{isPencilDown}">
			<s:Group top="15" id="brushGroup" height="94">
			</s:Group>

			<s:Image id="colorPicker" source="{GameAssets.img_bigCircleB}"
					 left="606" top="7"/>

			<s:TileGroup left="724" top="6" id="colorGroup"
						 requestedColumnCount="6" verticalGap="14"
						 horizontalGap="10">

			</s:TileGroup>

			<s:Image source="{GameAssets.img_colorHalo}" mouseEnabled="false"
					 mouseChildren="false" id="halo"/>
		</s:Group>

		<draw:DrawTextureBar id="textureBar" visible="{!isPencilDown}" left="91"
							 right="0" height="109"/>

	</s:Group>
</s:Group>
