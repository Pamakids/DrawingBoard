<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" width="100%" height="100%" xmlns:views="views.*"
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:photos="views.user.photos.*" xmlns:theme="views.theme.*" xmlns:draw="views.draw.*"
		 xmlns:user="views.user.*" xmlns:gallery="views.gallery.*" xmlns:test="views.main.test.*" xmlns:ns="http://flex.apache.org/experimental/ns"
		 xmlns:controls="com.pamakids.components.controls.*" xmlns:components="views.components.*" xmlns:layout="com.pamakids.layout.*"
		 creationComplete="group1_creationCompleteHandler(event)" addedToStage="group1_addedToStageHandler(event)"
		 initialize="group1_initializeHandler(event)" xmlns:main="views.main.*">

	<fx:Script>
		<![CDATA[
			import com.pamakids.services.QNService;
			import components.Recommends;
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import controllers.DBPopUp;
			import events.DetailEvent;
			import events.DrawEvent;
			import events.ReplayEvent;
			import events.ThemeFolderEvent;
			import events.UserItemEvent;
			import models.DataManager;
			import models.FontManager;
			import models.PaintVO;
			import models.PasterManager;
			import models.ThemeFolderVo;
			import models.ThemeManager;
			import models.ThemeVo;
			import models.UserVO;
			import proxy.LoginProxy;
			import views.draw.DrawView;
			import views.gallery.DiscussView;
			import views.gallery.GalleryViewOnline;
			import views.player.ReplayView;
			import views.user.UserCenterView;
			import vo.VO;

			private var db:DrawView;
			private var detailView:DiscussView;

			private var player:ReplayView;

			private var preState:String;

			protected function gallery_clickHandler(event:MouseEvent):void
			{
				addGallery();
			}

			protected function group1_addedToStageHandler(event:Event):void
			{
				stage.quality=StageQuality.LOW;
			}

			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				if (Multitouch.supportsTouchEvents)
					Multitouch.inputMode=MultitouchInputMode.TOUCH_POINT;

				currentState=visitView.name;
				currentState=uiView.name;
				currentState=mainView.name;

				initListeners();

				initPopup();
				initFolderList();
				initSound();
			}

			protected function group1_initializeHandler(event:FlexEvent):void
			{
				LoginProxy.autoLogin();
				PasterManager.getInstance().initialize();
				ThemeManager.getInstance().initialize();
				initConfig();

				DataManager.getInstance().initialize();
				FontManager.initialize();
			}

			protected function onClosePlayer(event:Event):void
			{
				if (player)
				{
					player.removeEventListener("replayToCenter", onplayerToCenter);
					player.removeEventListener("closeReplay", onClosePlayer);
					drawerLayer.removeElement(player);
					player.dispose();
				}
				player=null;

				if (preState)
				{
					currentState=preState;
					preState='';
				}
				else
					currentState=mainView.name;
			}

			protected function onDetail(e:DetailEvent):void
			{
				var paint:PaintVO=e.paint;
				if (detailView)
				{
					if (uiLayer.containsElement(detailView))
						uiLayer.removeElement(detailView);
					detailView.dispose();
					detailView=null;
				}

				gallery.visible=false;

				detailView=new DiscussView();
				detailView.setData(paint);
				uiLayer.addElementAt(detailView, uiLayer.numElements - 1);
				detailView.addEventListener("close", function(e:Event):void
				{
					uiLayer.removeElement(detailView);
					detailView.dispose();
					gallery.visible=true;
				});

				detailView.addEventListener("startDraw", function(e:Event):void
				{
					var vo:ThemeVo=detailView.getTheme();
					drawerLayer.removeAllElements();
					if (db)
					{
						db.dispose();
						db=null;
					}

					db=new DrawView();
					db.initData(vo);
					db.addEventListener("exitDraw", onExitDraw);
					drawerLayer.addElement(db);
				});
			}

			protected function onExitDraw(e:Event):void
			{
				if (e)
				{
					if (preState)
						currentState=preState;
					else
						currentState=mainView.name;
					preState='';
				}
				if (db)
				{
					drawerLayer.removeElement(db);
					db.dispose();
				}
				db=null;
			}

			protected function onExitVisit(e:Event):void
			{
				if (preState)
				{
					currentState=preState;
					preState='';
				}
				else
					currentState=uiView.name;
			}

			protected function onReplay(e:ReplayEvent):void
			{
				if (!preState)
					preState=currentState;
				currentState=drawView.name;

				onExitDraw(null);

				if (player)
				{
					player.removeEventListener("replayToCenter", onplayerToCenter);
					player.removeEventListener("closeReplay", onClosePlayer);
					if (drawerLayer.containsElement(player))
						drawerLayer.removeElement(player);
					player.dispose();
				}
				player=null;

				player=new ReplayView();
				player.initData(e.cover, e.data, e.audio);
				player.addEventListener("replayToCenter", onplayerToCenter);
				player.addEventListener("closeReplay", onClosePlayer);
				player.recordVisible=e.recordVisible;
				drawerLayer.addElement(player);

				if (e.recordVisible)
				{
					usercenter.refreshNavi();
				}
			}

			protected function onThemeFolder(e:ThemeFolderEvent):void
			{
				var data:ThemeFolderVo=e.data as ThemeFolderVo;
				themelist.setData(data);

				currentState=uiView.name;
				usercenter.visible=false;
				themelist.visible=true;
				gallery.visible=false;
			}

			protected function onViewGuest(e:UserItemEvent):void
			{
				var user:UserVO=e.user;
				if (UserVO.crtUser && user._id == UserVO.crtUser._id)
				{
					onplayerToCenter(null);
				}
				else
				{
					if (!preState)
						preState=currentState;
					currentState=visitView.name;
					guestView.user=user;
					guestView.refreshNavi();
				}
			}

			protected function onplayerToCenter(event:Event):void
			{
				if (detailView)
				{
					if (uiLayer.containsElement(detailView))
						uiLayer.removeElement(detailView);
					detailView.dispose();
					detailView=null;
				}
				addUsercenter();
			}

			protected function parent_clickHandler(event:MouseEvent):void
			{
				DBPopUp.addGusturePopUp(openParent);
			}


			protected function usercenter_clickHandler(event:MouseEvent):void
			{
				addUsercenter();
			}

			private function addGallery():void
			{
				currentState=uiView.name;
				usercenter.visible=false;
				themelist.visible=false;
				gallery.visible=true;
			}

			private function addUsercenter():void
			{
				currentState=uiView.name;
				usercenter.visible=true;
				themelist.visible=false;
				gallery.visible=false;
				usercenter.user=UserVO.crtUser;
				usercenter.refreshNavi();
			}

			private function initConfig():void
			{
				QNService.HOST=VO.FILESERVER_HOST;
			}

			private function initFolderList():void
			{
				foldersList.dataProvider=new ArrayCollection(ThemeManager.getInstance().getThemeList());
				foldersList.selectedIndex=0;
				foldersList.visible=true;
			}

			private function initListeners():void
			{
				addEventListener(ThemeFolderEvent.EVENT_ID, onThemeFolder);
				addEventListener("backToMain", onBackToMain);
				addEventListener("gotoGallery", onGotoGallery);
				addEventListener("gotoUserCenter", onGotoUserCenter);

				guestView.addEventListener("exitVisit", onExitVisit);

				addEventListener(DrawEvent.EVENT_ID, onDraw);
				addEventListener(ReplayEvent.EVENT_ID, onReplay);
				addEventListener(DetailEvent.EVENT_ID, onDetail);
				addEventListener(UserItemEvent.EVENT_ID, onViewGuest);

				parentView.addEventListener("parentsClose", function(e:Event):void
				{
					parentView.visible=false;
				});
			}

			private function initPopup():void
			{
				popupLayer.graphics.beginFill(0, .6)
				popupLayer.graphics.drawRect(-this.width, -this.height, this.width * 3, this.height * 3);
				popupLayer.graphics.endFill();
				DBPopUp.root=popupLayer;
			}

			private function initRecommend():void
			{
				recommendHodler.addChild(new Recommends(768, 1024));
			}

			private function initSound():void
			{
				var snd:Sound=new Sound(new URLRequest("assets/data/sounds/cnlet.mp3"));
				snd.play();
			}

			private function onBackToMain(e:Event):void
			{
				currentState=mainView.name;
			}

			private function onDraw(e:DrawEvent):void
			{
				preState=currentState;
				currentState=drawView.name;

				var vo:ThemeVo=e.data;
				drawerLayer.removeAllElements();
				if (db)
				{
					db.dispose();
					db=null;
				}

				db=new DrawView();
				db.initData(vo);
				db.addEventListener("exitDraw", onExitDraw);
				drawerLayer.addElement(db);
			}

			private function onGotoGallery(e:Event):void
			{
				addGallery();
			}

			private function onGotoUserCenter(e:Event):void
			{
				addUsercenter();
			}

			private function openParent():void
			{
				parentView.visible=true;
			}
		]]>
	</fx:Script>

	<s:states>
		<mx:State id="mainView" name="mainViewState"/>
		<mx:State id="uiView" name="uiViewState"/>
		<mx:State id="visitView" name="visitViewState"/>
		<mx:State id="drawView" name="drawViewState"/>
	</s:states>

	<s:Image width="100%" height="100%" verticalCenter="0" horizontalCenter="0" source="@Embed('assets/homepage/img/common/homepageBg_B.jpg')"
			 mouseEnabled="false" includeIn="mainViewState"/>

	<s:Image source="@Embed('assets/data/images/publicBg.jpg')" width="100%" verticalCenter="0" horizontalCenter="0" height="100%"
			 mouseEnabled="false" excludeFrom="mainViewState"/>

	<s:Group width="1024" height="768" id="mainGroup" includeIn="mainViewState" verticalCenter="0" horizontalCenter="0">
		<s:Image source="@Embed('assets/homepage/img/common/parents.png')" left="16" top="21" click="parent_clickHandler(event)"/>
		<s:Image source="@Embed('assets/global/usercenterBtn.png')" right="42" top="21" click="usercenter_clickHandler(event)"/>
		<s:Image source="@Embed('assets/homepage/img/common/title.png')" top="62" horizontalCenter="0" mouseEnabled="false"/>

		<theme:ThemeFolderList2 id="foldersList" width="100%" height="70%" horizontalCenter="0" verticalCenter="0" visible="false">
		</theme:ThemeFolderList2>

		<s:Image source="@Embed('assets/homepage/btn/btn_removeTheme.png')" left="330" bottom="21" visible="false"/>
		<s:Image source="@Embed('assets/global/galleryBtn.png')" horizontalCenter="0" bottom="21" click="gallery_clickHandler(event)"/>
		<s:Image source="@Embed('assets/homepage/btn/btn_shop.png')" right="330" bottom="21" visible="false"/>
	</s:Group>

	<s:Image source="@Embed('assets/data/images/publicBg.jpg')" width="100%" verticalCenter="0" horizontalCenter="0" height="100%"
			 mouseEnabled="false" visible="{parentView.visible}"/>
	<s:Group width="1024" height="768" includeIn="mainViewState" verticalCenter="0" horizontalCenter="0">
		<main:ParentView id="parentView" visible="false"/>
	</s:Group>

	<mx:UIComponent id="recommendHodler" visible="{currentState=='mainViewState'}"/>

	<s:Group id="uiLayer" includeIn="uiViewState" width="1024" height="768" verticalCenter="0" horizontalCenter="0">
		<theme:ThemeListView id="themelist" visible="false"/>
		<gallery:GalleryViewOnline id="gallery" visible="false"/>
		<user:UserCenterView id="usercenter" visible="false"/>
	</s:Group>

	<user:UserCenterView id="guestView" includeIn="visitViewState" verticalCenter="0" horizontalCenter="0"/>

	<s:Image width="100%" height="100%" verticalCenter="0" horizontalCenter="0" source="@Embed('assets/homepage/img/common/drawBG.jpg')"
			 mouseEnabled="false" includeIn="drawViewState"/>
	<s:Group width="1024" height="768" id="drawerLayer" verticalCenter="0" horizontalCenter="0" includeIn="drawViewState"/>

	<mx:UIComponent id="popupLayer" width="1024" height="768" visible="false" horizontalCenter="0" verticalCenter="0"/>

</s:Group>
