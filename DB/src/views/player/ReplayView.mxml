<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark" width="1024" height="768"
		 xmlns:player="views.player.*" xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="group1_creationCompleteHandler(event)">

	<fx:Script>
		<![CDATA[

			import com.greensock.TweenLite;
			import com.pamakids.utils.CloneUtil;

			import mx.events.FlexEvent;

			import models.PaintData;
			import models.PasterManager;
			import models.TextureVO;
			import models.UserVO;

			import playback.EnumBack;
			import playback.PlayBackMain;

			import proxy.FileProxy;

			import views.draw.TextureItem;

			import vo.VO;

			private var data:PaintData;
			private var player:PlayBackMain;

			public var recordVisible:Boolean;

			private var audio:String;

			public function initData(cover:Object, _data:PaintData, _audio:String):void
			{
				data=_data;
				thumb.source=cover;
				audio=_audio;
				textureArr=[];
				for each (var o:Object in data.textureData)
				{
					if (o is TextureVO)
						textureArr.push(o);
					else
					{
						var to:TextureVO=CloneUtil.convertObject(o, TextureVO);
						textureArr.push(to);
					}
				}

				bg.source=data.theme.dataUrl;

				controller.recordUrl=FileProxy.username + "/" + data.path + VO.AUDIO_NAME;

				initPlayer();
			}

			private function initPlayer():void
			{
				disposePlayer();

				player=new PlayBackMain(data.drawData);
				player.changeTimerRate(controller.speed);
				player.pause();
				dbLayer.addChild(player);
				player.addEventListener(Event.ENTER_FRAME, onEnterFrame);
				player.addEventListener("end", onEnd);
			}

			private function replayTexture(arr:Array):void
			{
				controller.mouseChildren=controller.mouseEnabled=false;
				for (var i:int=0; i < arr.length; i++)
				{
					var to:TextureVO=arr[i];
					playTI(to, delay * i / 2);
				}
				TweenLite.delayedCall(delay * i / 2,
					function():void {
						controller.mouseChildren=controller.mouseEnabled=true;
					});
			}

			private var delay:Number=.6;
			private var finished:Boolean;

			public function dispose():void
			{
				disposePlayer();

				controller.removeEventListener("play", onPlay);
				controller.removeEventListener("pause", onPause);
				controller.removeEventListener("changeSpeed", onChange);
				controller.removeEventListener("replayToCenter", onGotoGallery);
				controller.removeEventListener("close", onClose);

				controller.setProgress(0);
				if (rec)
				{
					rec.stopAmr();
				}
				rec=null;
				removeAllElements();
			}

			private function disposePlayer():void
			{
				if (player)
				{
					player.pause();
					dbLayer.removeChild(player);
					player.removeEventListener(Event.ENTER_FRAME, onEnterFrame);
					player.removeEventListener("end", onEnd);
					player.dispose();
				}
				EnumBack.backPercent=0;
				player=null;
				if (rec)
					rec.stopAmr();
			}

			private function playTI(to:TextureVO, d:Number):void
			{
				TweenLite.delayedCall(d, function():void {
					var ti:TextureItem=new TextureItem();
					var cls:Class=PasterManager.getInstance().getPasterRefByIndex(to.index);
					ti.setSource(cls);
					ti.setPos(to);

					textureLayer.addElement(ti);
					TweenLite.to(ti, delay, {alpha: 1});
				});
			}

			protected function drawBoard_clickHandler(event:MouseEvent):void
			{
				controller.playBars();
			}

			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				controller.addEventListener("play", onPlay);
				controller.addEventListener("pause", onPause);
				controller.addEventListener("changeSpeed", onChange);
				controller.addEventListener("replayToCenter", onGotoGallery);
				controller.addEventListener("close", onClose);
				controller.recordVisible=recordVisible && !audio;
			}

			protected function onPlay(event:Event):void
			{
				if (finished)
				{
					disposePlayer();

					textureLayer.removeAllElements();
					initPlayer();
				}
				finished=false;
				thumb.visible=true;
				if (audio && Capabilities.os.toLowerCase().indexOf("iphone") >= 0)
				{
					if (!rec)
					{
						rec=RecordAudio.instance;
					}
					rec.playAmr(audio, 1.0, sureStart);
				}
				else
					sureStart();
			}

			private function sureStart():void
			{
				thumb.visible=false;
				player.start();
			}

			protected function onPause(event:Event):void
			{
				player.pause();
			}

			protected function onChange(event:Event):void
			{
				player.changeTimerRate(controller.speed);
			}

			private var textureArr:Array;
			private var rec:RecordAudio;

			protected function onEnterFrame(event:Event):void
			{
				controller.setProgress(EnumBack.backPercent);
			}

			protected function onGotoGallery(event:Event):void
			{
				dispatchEvent(new Event("replayToCenter"));
			}

			protected function onClose(event:Event):void
			{
				dispatchEvent(new Event("closeReplay"));
			}

			protected function onEnd(event:Event):void
			{
				controller.setProgress(100);
				finished=true;
				player.removeEventListener(Event.ENTER_FRAME, onEnterFrame);
				player.removeEventListener("end", onEnd);
				player.pause();
				controller.stop();
				replayTexture(textureArr);
			}

		]]>
	</fx:Script>

	<s:Group id="drawBoard" width="100%" height="100%"
			 click="drawBoard_clickHandler(event)">
		<s:Image id="bg"/>
		<mx:UIComponent id="dbLayer">
		</mx:UIComponent>
		<s:Group id="textureLayer" mouseEnabled="false" mouseChildren="false"/>
		<s:Image id="thumb"/>
	</s:Group>
	<player:ReplayControlBar id="controller">

	</player:ReplayControlBar>
</s:Group>
