<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark" width="1024" height="768"
		 creationComplete="group1_creationCompleteHandler(event)"
		 mouseUp="group1_mouseUpHandler(event)">

	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			import com.pamakids.models.ResultVO;
			import com.pamakids.services.QNService;
			import com.pamakids.utils.CloneUtil;

			import mx.events.FlexEvent;

			import spark.components.Image;

			import controllers.API;
			import controllers.DBPopUp;

			import models.PaintVO;
			import models.UserVO;

			import proxy.FileProxy;
			import proxy.UserProxy;

			import views.user.list.Fanlist;
			import views.user.list.FollowList;
			import views.user.list.PaintList;

			import vo.VO;

			protected function close_clickHandler(event:MouseEvent):void
			{
				if (!isGuest)
					dispatchEvent(new Event("backToMain", true));
				else
				{
					dispatchEvent(new Event("exitVisit"));
				}
			}

			protected function gallery_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event("gotoGallery", true));
			}

			private var _naviIndex:int;

			public function get naviIndex():int
			{
				return _naviIndex;
			}

			public function set naviIndex(value:int):void
			{
				_naviIndex=value;

				if (UserVO.crtUser == null && _naviIndex != 0)
				{
					DBPopUp.addLoginPopup(refreshNavi);
					return;
				}

				for (var i:int=0; i < naviGroup.numChildren; i++)
				{
					var img:Image=naviGroup.getElementAt(i) as Image;
					img.visible=_naviIndex == i;

					var l:Label=naviTextGroup.getElementAt(i) as Label;
					l.setStyle("color", _naviIndex == i ? 0xffffff : 0x60cdb5);
				}

				showList(_naviIndex);
			}

			public function refreshNavi():void
			{
				if(!isGuest){
					user=UserVO.crtUser;
				}
				inited=false;
				paintEnd=false;
				adding=false;
				initData(user);
			}

			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				addEventListener(Event.ENTER_FRAME, onEnterFrame);
			}

			public var user:UserVO;
			private var uproxy:UserProxy;

			[Bindable]
			private var isGuest:Boolean=false;

			private var localArr:Array;

			private var inited:Boolean=false;

			public function dispose():void
			{

			}

			public function initData(_user:UserVO):void
			{
				FileProxy.mergeFiles();
				user=_user;

				isGuest=(user != UserVO.crtUser);

				followedText="关注\n0";
				befollowedText="粉丝\n0";

				inited=false;
				onlineArr=[];
				localArr=[];

				if (!isGuest)
				{
					localArr=FileProxy.getLocalPaints();
					localArr.reverse();
				}

				totalPaint=localArr.length;

				if (user != null)
				{
					crtUsername=user.nickname ? user.nickname : user.username;
					avatar.source=user.portrait ? QNService.getQNThumbnail(user.portrait,157,157) : VO.DEFAULT_AVATAR;

					uproxy=new UserProxy();
					uproxy.pageIndex=1;
					uproxy.user=user;
					uproxy.getPaintList(paintListLoaded);
					uproxy.getFollowList(followListLoaded);
					uproxy.getFanList(fanListLoaded);
					uproxy.getMsgCount(msgCountLoaded);
					editable=!isGuest;
				}
				else
				{
					editable=false;
					crtUsername="";
					avatar.source="";
				}

				followArr=[];
				fanArr=[];

				paintList=null;
				followList=null;
				fanList=null;
			}

			[Bindable]
			private var editable:Boolean;

			private var onlineArr:Array;
			private var followArr:Array;
			private var fanArr:Array;

			private function paintListLoaded(arr:Object):void
			{
				if (arr is Array)
				{
					uproxy.pageIndex++;
					for each (var o:Object in arr)
					{
						var po:PaintVO=CloneUtil.convertObject(o, PaintVO);
						po.data=po.cover.replace("thumb.jpg", "config.json");

						var match:Boolean=false;
						for (var i:int=0; i < localArr.length; i++)
						{
							var pv:PaintVO=localArr[i];
							if (pv.cover.indexOf(po.cover) >= 0)
							{
								match=true;
								localArr[i]=po;
								break;
							}
						}

						if (!match)
							onlineArr.push(po);

					}
				}
				else
				{
				}

				inited=false;
				naviIndex=0;

			}

			private function followListLoaded(arr:Object):void
			{
				followArr=[];
				if (arr is Array)
				{
//					followArr=arr as Array;
					for each (var o:Object in arr)
					{
						followArr.push(CloneUtil.convertObject(o.friend, UserVO));
					}
					followedText="关注\n" + followArr.length;
				}
				else
				{
				}
			}


			private function fanListLoaded(arr:Object):void
			{
				if (arr is Array)
				{
					fanArr=[];
					for each (var o:Object in arr)
					{
						fanArr.push(CloneUtil.convertObject(o.friend, UserVO));
					}

//					fanArr=arr as Array;
					befollowedText="粉丝\n" + fanArr.length;
				}
				else
				{
				}
			}

			private function msgCountLoaded(o:ResultVO):void
			{
				if (o.status)
					messageCount=o.results.toString();
			}

			protected function navi_clickHandler(event:MouseEvent):void
			{
				var dx:Number=naviGroup.mouseX;
				var index:int=dx / userBar.width * 3;
				naviIndex=Math.max(0, Math.min(index, 2));
			}

			[Bindable]
			private var followedText:String;
			[Bindable]
			private var befollowedText:String;

			[Bindable]
			private var messageCount:String="0";

			[Bindable]
			private var crtUsername:String="未登录";

			protected function editClickHandler(event:MouseEvent):void
			{
				if (UserVO.crtUser == null)
				{
					DBPopUp.addLoginPopup(refreshNavi);
					return;
				}
				DBPopUp.addUserInfoPopup(refreshInfo);
			}

			private function refreshInfo():void
			{
				refreshNavi();
				naviIndex=0;
			}

			private var paintArr:Array;

			private function showList(i:int):void
			{
				listContainer.removeAllElements();
				switch (i)
				{
					case 0:
					{
						if (!paintList)
						{
							paintList=new PaintList();
						}
						if (!inited)
						{
							paintArr=localArr.concat(onlineArr);
							paintList.initData(paintArr);
						}
						inited=true;
						listContainer.addElement(paintList);
						totalPaint=paintArr.length;
						break;
					}

					case 1:
					{
						if (!followList)
						{
//							testArr(followArr, 20);
							followList=new FollowList();
							followList.initData(followArr);
						}
						listContainer.addElement(followList);
						break;
					}

					case 2:
					{
						if (!fanList)
						{
//							testArr(fanArr, 10);
							fanList=new Fanlist();
							fanList.initData(fanArr);
						}
						listContainer.addElement(fanList);

						break;
					}

					default:
					{
						break;
					}
				}
			}

			private function testArr(arr:Array, times:int=20):void
			{
				if (Capabilities.isDebugger)
					for (var i:int=0; i < times; i++)
					{
						arr.push(user);
					}
			}

			private var paintList:PaintList;
			private var followList:FollowList;
			private var fanList:Fanlist;

			protected function onEnterFrame(event:Event):void
			{
//				dragging=checkPos();
				if (!dragging)
					return;
//				trace(listContainer.contentHeight);
				if (listContainer.contentHeight == 0)
					return;
				if (!list.verticalScrollBar)
					return;
				var offY:Number=list.verticalScrollBar.value;

				resetPos(offY);
			}

			private function resetPos(offY:Number):void
			{

//				trace(offY);
				userBar.top=Math.min(0, Math.max(maxOffY, dy - offY));
			}

			private var maxOffY:Number=-182;
			private var dragging:Boolean;

			protected function group1_mouseUpHandler(event:MouseEvent):void
			{
				dragging=false;
				var top:Number=userBar.top as Number;
				if (top != 0 || top != maxOffY)
				{
					var ty:Number=0;
					if (list.verticalScrollBar)
					{
						if (list.verticalScrollBar.value > 5)
						{
							ty=maxOffY;
						}
						else if (list.verticalScrollBar.value < -5)
						{
							ty=0;
						}
						else
						{
							ty=userBar.top < maxOffY / 2 ? maxOffY : 0;
						}
//						return;
//						ty=list.verticalScrollBar.value >= 0 ? (userBar.top == maxOffY ? maxOffY : 0) : 0;
					}
//					if (listContainer.contentHeight == 0)
//						ty=0;
					TweenLite.killTweensOf(userBar);
					TweenLite.to(userBar, .5, {top: ty});

					if (naviIndex == 0)
					{
						if (list.verticalScrollBar && list.verticalScrollBar.value + list.height > paintList.height && uproxy && !adding && !paintEnd)
						{
							adding=true;
							uproxy.getPaintList(paintListAdded);
						}
					}
				}
			}

			private var adding:Boolean=false;

			private var addArr:Array;

			private var paintEnd:Boolean;

			private function paintListAdded(arr:Object):void
			{
				adding=false;
				if (arr is Array)
				{
					if (arr.length == 0)
						paintEnd=true;
					else
						uproxy.pageIndex++;

					addArr=[];

					for each (var o:Object in arr)
					{
						var po:PaintVO=CloneUtil.convertObject(o, PaintVO);
						po.data=po.cover.replace("thumb.jpg", "config.json");

						var match:Boolean=false;
						for (var i:int=0; i < localArr.length; i++)
						{
							var pv:PaintVO=localArr[i];
							if (pv.cover.indexOf(po.cover) >= 0)
							{
								match=true;
								localArr[i]=po;
								break;
							}
						}

						if (!match)
							addArr.push(po);
					}
				}
				else
				{

				}

				paintList.addArr(addArr);

				totalPaint+=addArr.length;
			}

			[Bindable]
			private var totalPaint:int=0;

			private var dy:Number=0;

			protected function listContainer_mouseDownHandler(event:MouseEvent):void
			{
				dy=userBar.top as Number;
				dragging=true;
				TweenLite.killTweensOf(userBar);
			}

			private function checkPos():Boolean
			{
//				if()
				return false;
			}

			protected function followClick(event:MouseEvent):void
			{
				followEnable=false;
				API.instance.followFriend(this.user._id, true, followCB);
			}

			protected function followCancelClick(event:MouseEvent):void
			{
				followEnable=false;
				API.instance.followFriend(this.user._id, false, followCB);
			}

			[Bindable]
			private var followed:Boolean;

			[Bindable]
			private var followEnable:Boolean=true;

			private function followCB(o:ResultVO):void
			{
				followEnable=true;
				if (o.status)
				{
					followed=!followed;
				}
				else
				{

				}
			}

			protected function messageClick(event:MouseEvent):void
			{
				DBPopUp.addMessagePopup();			
			}

		]]>
	</fx:Script>


	<s:Image source="@Embed('assets/data/images/publicBg.png')"
			 mouseEnabled="false"/>
	<s:Image source="@Embed('assets/global/galleryBtn.png')" right="42" top="21"
			 click="gallery_clickHandler(event)" visible="{!isGuest}"/>

	<s:Image source="@Embed('assets/gallery/img/common/back.png')" left="42"
			 top="21" click="close_clickHandler(event)"/>

	<s:Group clipAndEnableScrolling="true" top="132" width="100%">

		<s:Group id="userBar" left="29" width="965">
			<s:Group width="100%" top="172" click="navi_clickHandler(event)">
				<s:Image source="@Embed('assets/usercenter/navi/naviBG.png')"/>

				<s:HGroup id="naviGroup" gap="1" left="1">
					<s:Image 
							 source="@Embed('assets/usercenter/navi/navi0.png')"/>
					<s:Image 
							 source="@Embed('assets/usercenter/navi/navi1.png')"
							 visible="false"/>
					<s:Image 
							 source="@Embed('assets/usercenter/navi/navi2.png')"
							 visible="false"/>
				</s:HGroup>

				<s:HGroup top="23" id="naviTextGroup" gap="1" left="1">
					<s:Label text="{'我的作品\n'+totalPaint.toString()}" width="320"
							 textAlign="center" fontWeight="bold"/>
					<s:Label text="{followedText}" width="318" fontWeight="bold"
							 textAlign="center"/>
					<s:Label text="{befollowedText}" width="322"
							 fontWeight="bold" textAlign="center"/>
				</s:HGroup>

			</s:Group>
			<s:Group>
				<s:Image 
						 source="@Embed('assets/usercenter/userinfo/bannerBG.png')"
						 mouseEnabled="false"/>
				<s:Image id="avatar" left="151" top="12" width="157"
						 height="157"/>
				<s:Label text="{crtUsername}" left="362" top="45"
						 mouseEnabled="false" fontSize="18" color="#60cdb5"/>

				<s:Group visible="{!isGuest}" click="messageClick(event)">
					<s:Image 
							 source="@Embed('assets/usercenter/userinfo/message.png')"
							 left="363" top="123"/>

					<s:Group left="392" top="134" visible="{messageCount!='0'}">
						<s:Image 
								 source="@Embed('assets/usercenter/userinfo/countBG.png')"/>
						<s:Label text="{messageCount}" textAlign="center"
								 top="10" left="-4" width="40" color="0xffffff"
								 fontSize="14" fontWeight="normal"/>
					</s:Group>
				</s:Group>

				<s:Image 
						 source="@Embed('assets/usercenter/userinfo/editBtn.png')"
						 left="845" top="129" click="editClickHandler(event)"
						 visible="{editable}"/>

				<s:Group visible="{isGuest}" enabled="{followEnable}">
					<s:Image visible="{!followed}"
							 source="@Embed('assets/usercenter/userinfo/followBtn.png')"
							 left="845" top="123" click="followClick(event)"/>
					<s:Image visible="{followed}"
							 source="@Embed('assets/usercenter/userinfo/followed.png')"
							 left="845" top="123"
							 click="followCancelClick(event)"/>
				</s:Group>
			</s:Group>

			<s:Scroller id="list" top="263"
						mouseDown="listContainer_mouseDownHandler(event)"
						horizontalScrollPolicy="off" verticalScrollPolicy="on"
						width="990" height="550">
				<s:Group id="listContainer">
				</s:Group>
			</s:Scroller>

		</s:Group>
	</s:Group>

</s:Group>
