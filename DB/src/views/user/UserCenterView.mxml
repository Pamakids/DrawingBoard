<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark" width="1024" height="768"
		 creationComplete="group1_creationCompleteHandler(event)"
		 mouseUp="group1_mouseUpHandler(event)">

	<fx:Script>
		<![CDATA[

			import com.greensock.TweenLite;
			import com.pamakids.utils.CloneUtil;

			import mx.events.FlexEvent;

			import spark.components.Image;
			import spark.components.TextArea;

			import controllers.DBPopUp;

			import models.PaintVO;
			import models.UserVO;

			import proxy.FileProxy;
			import proxy.UserProxy;

			import views.user.list.Fanlist;
			import views.user.list.FollowList;
			import views.user.list.PaintList;

			protected function close_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event("usercenterClose"));
			}

			protected function gallery_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event("usercentertogallery"));
			}

			private var _naviIndex:int;

			public function get naviIndex():int
			{
				return _naviIndex;
			}

			public function set naviIndex(value:int):void
			{
				_naviIndex=value;

				if (UserVO.crtUser == null)
				{
					DBPopUp.addLoginPopup(refreshNavi);
					return;
				}

				for (var i:int=0; i < naviGroup.numChildren; i++)
				{
					var img:Image=naviGroup.getElementAt(i) as Image;
					img.visible=_naviIndex == i;

					var ta:TextArea=naviTextGroup.getElementAt(i) as TextArea;
					ta.setStyle("color", _naviIndex == i ? 0xffffff : 0x60cdb5);
				}

				showList(_naviIndex);
			}

			private function refreshNavi():void
			{
				initData(user);
			}

			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				addEventListener(Event.ENTER_FRAME, onEnterFrame);
			}

			private var user:UserVO;
			private var uproxy:UserProxy;

			private var isGuest:Boolean=false;

			private var localArr:Array;

			public function initData(_user:UserVO):void
			{
				FileProxy.mergeFiles();
				user=_user;


				isGuest=(user != UserVO.crtUser);

				followedText="关注\n0";
				befollowedText="粉丝\n0";

				paintArr=[];
				localArr=[];

				if (!isGuest)
				{
					localArr=FileProxy.getLocalPaints();
					localArr.reverse();
				}

				paintText="我的作品\n" + paintArr.length;

				if (user != null)
				{
					crtUsername=user.username;
					avatar.source=user.portrait;

//				listContainer.removeAllElements();
					uproxy=new UserProxy();
					uproxy.user=user;
					uproxy.getPaintList(paintListLoaded);
					uproxy.getFollowList(followListLoaded);
					uproxy.getFanList(fanListLoaded);
					editable=!isGuest;
				}
				else
					editable=false;

				naviIndex=0;
			}

			[Bindable]
			private var editable:Boolean;

			private var paintArr:Array;
			private var followArr:Array;
			private var fanArr:Array;

			private function paintListLoaded(arr:Object):void
			{
				if (arr is Array)
				{
					arr.reverse();
					for each (var o:Object in arr)
					{
						var po:PaintVO=CloneUtil.convertObject(o, PaintVO);
						po.data=po.cover.replace("thumb.jpg", "config.json");
						paintArr.push(po);

						for (var i:int=0; i < localArr.length; i++)
						{
							var pv:PaintVO=localArr[i];
							if (checkOnline(pv, po))
							{
								localArr.splice(i);
								break;
							}
						}

					}
				}
				else
				{

				}
				paintText="我的作品\n" + paintArr.length;

			}

			private function checkOnline(local:PaintVO, online:PaintVO):Boolean
			{
				var dLocal:String=local.data;
				var dOnline:String=online.data;
				dLocal=dLocal.substr(dLocal.length - dOnline.length);
				return dOnline == dLocal;
			}

			private function followListLoaded(arr:Object):void
			{
				if (arr is Array)
				{
					followArr=arr as Array;
					followedText="关注\n" + followArr.length;
				}
				else
				{

				}
			}


			private function fanListLoaded(arr:Object):void
			{
				if (arr is Array)
				{
					fanArr=arr as Array;
					befollowedText="粉丝\n" + fanArr.length;
				}
				else
				{

				}
			}

			protected function navi_clickHandler(event:MouseEvent):void
			{
				var dx:Number=naviGroup.mouseX;
				var index:int=dx / userBar.width * 3;
				naviIndex=Math.max(0, Math.min(index, 2));
			}

			[Bindable]
			private var paintText:String;
			[Bindable]
			private var followedText:String;
			[Bindable]
			private var befollowedText:String;

			[Bindable]
			private var messageCount:String="0";

			[Bindable]
			private var crtUsername:String="未登录";

			protected function editClickHandler(event:MouseEvent):void
			{
				if (UserVO.crtUser == null)
				{
					DBPopUp.addLoginPopup(refreshNavi);
					return;
				}
				DBPopUp.addUserInfoPopup(refreshInfo);
			}

			private function refreshInfo():void
			{

			}

			private function showList(i:int):void
			{
				listContainer.removeAllElements();
				switch (i)
				{
					case 0:
					{
						if (!paintList)
						{
							paintList=new PaintList();
						}
						paintArr=paintArr.concat(localArr);
						paintList.initData(paintArr);
						listContainer.addElement(paintList);
						break;
					}

					case 1:
					{
						if (!followList)
						{
							followList=new FollowList();
							followList.initData(followArr);
						}
						listContainer.addElement(followList);
						break;
					}

					case 2:
					{
						if (!fanList)
						{
							fanList=new Fanlist();
							fanList.initData(fanArr);
						}
						listContainer.addElement(fanList);

						break;
					}

					default:
					{
						break;
					}
				}
			}

			private var paintList:PaintList;
			private var followList:FollowList;
			private var fanList:Fanlist;

			protected function onEnterFrame(event:Event):void
			{
//				dragging=checkPos();
				if (!dragging)
					return;
//				trace(listContainer.contentHeight);
				if (listContainer.contentHeight == 0)
					return;
				if (!list.verticalScrollBar)
					return;
				var offY:Number=list.verticalScrollBar.value;

				resetPos(offY);
			}

			private function resetPos(offY:Number):void
			{

//				trace(offY);
				userBar.top=Math.min(0, Math.max(maxOffY, dy - offY));
			}

			private var maxOffY:Number=-182;
			private var dragging:Boolean;

			protected function group1_mouseUpHandler(event:MouseEvent):void
			{
				dragging=false;
				var top:Number=userBar.top as Number;
				if (top != 0 || top != maxOffY)
				{
					var ty:Number=0;
					if (list.verticalScrollBar)
					{
						if (list.verticalScrollBar.value > 5)
						{
							ty=maxOffY;
						}
						else if (list.verticalScrollBar.value < -5)
						{
							ty=0;
						}
						else
						{
							ty=userBar.top < maxOffY / 2 ? maxOffY : 0;
						}
//						return;
//						ty=list.verticalScrollBar.value >= 0 ? (userBar.top == maxOffY ? maxOffY : 0) : 0;
					}
//					if (listContainer.contentHeight == 0)
//						ty=0;
					TweenLite.killTweensOf(userBar);
					TweenLite.to(userBar, .5, {top: ty});
				}
			}

			private var dy:Number=0;

			protected function listContainer_mouseDownHandler(event:MouseEvent):void
			{
				dy=userBar.top as Number;
				dragging=true;
				TweenLite.killTweensOf(userBar);
			}

			private function checkPos():Boolean
			{
//				if()
				return false;
			}

		]]>
	</fx:Script>


	<s:Image source="@Embed('assets/data/images/publicBg.png')"
			 mouseEnabled="false"/>
	<s:Image source="@Embed('assets/global/galleryBtn.png')" right="42" top="21"
			 click="gallery_clickHandler(event)"/>

	<s:Image source="@Embed('assets/gallery/img/common/back.png')" left="42"
			 top="21" click="close_clickHandler(event)"/>

	<s:Group clipAndEnableScrolling="true" top="132" width="100%">

		<s:Group id="userBar" left="29" width="965">
			<s:Group width="100%" top="172" click="navi_clickHandler(event)">
				<s:Image source="@Embed('assets/usercenter/navi/naviBG.png')"/>

				<s:HGroup id="naviGroup" gap="1" left="1">
					<s:Image 
							 source="@Embed('assets/usercenter/navi/navi0.png')"/>
					<s:Image 
							 source="@Embed('assets/usercenter/navi/navi1.png')"/>
					<s:Image 
							 source="@Embed('assets/usercenter/navi/navi2.png')"/>
				</s:HGroup>

				<s:HGroup top="19" id="naviTextGroup" gap="1" left="1">
					<s:TextArea text="{paintText}" width="320"
								textAlign="center" editable="false"/>
					<s:TextArea text="{followedText}" width="318"
								textAlign="center" editable="false"/>
					<s:TextArea text="{befollowedText}" width="322"
								textAlign="center" editable="false"/>
				</s:HGroup>

			</s:Group>
			<s:Group>
				<s:Image 
						 source="@Embed('assets/usercenter/userinfo/bannerBG.png')"
						 mouseEnabled="false"/>
				<s:Image id="avatar" left="151" top="12" width="157"
						 height="157"/>
				<s:Label text="{crtUsername}" left="362" top="45"
						 mouseEnabled="false" fontSize="18" color="#60cdb5"/>

				<s:Image 
						 source="@Embed('assets/usercenter/userinfo/message.png')"
						 left="363" top="123"/>

				<s:Group left="392" top="134" visible="{messageCount!='0'}">
					<s:Image 
							 source="@Embed('assets/usercenter/userinfo/countBG.png')"/>
					<s:TextArea text="{messageCount}" textAlign="center" top="5"
								left="-4" width="40" color="0xffffff"
								fontSize="14" editable="false"
								fontWeight="normal"/>
				</s:Group>

				<s:Image 
						 source="@Embed('assets/usercenter/userinfo/addFriend.png')"
						 left="460" top="123"/>

				<s:Image 
						 source="@Embed('assets/usercenter/userinfo/editBtn.png')"
						 left="845" top="129" click="editClickHandler(event)"
						 visible="{editable}"/>
			</s:Group>

			<s:Scroller id="list" top="263"
						mouseDown="listContainer_mouseDownHandler(event)"
						horizontalScrollPolicy="off" verticalScrollPolicy="on"
						width="990" height="550">
				<s:Group id="listContainer">
				</s:Group>
			</s:Scroller>

		</s:Group>
	</s:Group>

</s:Group>
