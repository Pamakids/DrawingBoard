<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark" width="324" height="246"
		 creationComplete="group1_creationCompleteHandler(event)"
		 xmlns:ns="http://flex.apache.org/experimental/ns"
		 xmlns:components="views.components.*">

	<fx:Script>
		<![CDATA[

			import com.pamakids.manager.LoadManager;
			import com.pamakids.models.ResultVO;

			import mx.events.FlexEvent;

			import controllers.API;

			import events.ReplayEvent;

			import models.PaintData;
			import models.PaintVO;

			import proxy.FileProxy;
			import proxy.UploadProxy;

			import vo.VO;

			private var _status:int;

			public function get status():int
			{
				return _status;
			}

			public function set status(value:int):void
			{
				_status=value;

				for (var i:int=0; i < statusGroup.numChildren; i++)
				{
					var img:Image=statusGroup.getElementAt(i) as Image;
					img.visible=i == _status;
				}
			}

			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				status=status;
			}

			private var _data:PaintVO;

			public function set data(o:PaintVO):void
			{
				_data=o;
				img.source=o.cover;

				if (!ulp)
					ulp=new UploadProxy(data);

				statusGroup.visible=data.local;
				if (ulp.checkIsUploaded())
				{
					status=2;
				}
				else
					status=0;
			}

			public function get data():PaintVO
			{
				return _data;
			}

			private function startUpload():void
			{
				ulp.uploadFiles(setProgress, uploadComplete);
				status=1;
				uploading=true;
			}

			private function stopUpload():void
			{
				status=0;
				uploading=false;
			}

			private function uploadComplete(dataUrl:String, thumbUrl:String, audioUrl:String):void
			{
				var obj:Object={"cover": thumbUrl, "data": dataUrl, "audio": audioUrl};
				API.instance.paintAdd(added, obj);
			}

			private function added(o:ResultVO):void
			{
				this.enabled=true;
				uploading=false;
				trace(o.results)
				if (o.status)
				{
					status=2;
				}
				else
				{
					status=0;
				}
			}

			private function setProgress(value:Number):void
			{
				progress.setProgress(value);
			}

			protected function statusGroup_clickHandler(event:MouseEvent):void
			{
				trace(status)
				switch (status)
				{
					case 0: //上传
					{
						startUpload();
						break;
					}

					case 1: //取消
					{
						stopUpload();
						break;
					}

					case 2: //完成
					{

						break;
					}

					default:
					{
						break;
					}
				}
			}

			[Bindable]
			private var uploading:Boolean;

			private var paintData:PaintData;

			private var ulp:UploadProxy;

			protected function img_clickHandler(event:MouseEvent):void
			{
				var path:String;
				var url:String=_data.data;
				var local:String=hostToLocal(url);
				if (url.indexOf("http") >= 0)
				{
					LoadManager.instance.loadText(url, dataLoadComplete, local);
				}
				else
				{
					LoadManager.instance.loadText(url, dataLoadComplete);
				}

				if (!paintData)
				{
				}
			}

			public static function hostToLocal(url:String):String
			{
				var str:String;
				str=url.substr(url.indexOf(".com") + 1);
				str=VO.CACHE_PATH + str;
				return str;
			}

			private function dataLoadComplete(s:String):void
			{
				paintData=FileProxy.parseConfig(s);
				dispatchEvent(new ReplayEvent(paintData));
			}

		]]>
	</fx:Script>

	<s:Image source="@Embed('assets/usercenter/paint/paintBG.png')"/>
	<s:Image id="img" width="300" height="225" click="img_clickHandler(event)"
			 verticalCenter="0" horizontalCenter="0"/>

	<s:Group visible="{uploading}">
		<components:MyProgressBar width="232" height="10" left="20" top="217"
								  id="progress"/>
		<s:Label text="正在上传" left="180" top="198" color="white" fontSize="18"/>
	</s:Group>

	<s:Group left="268" top="191" id="statusGroup"
			 click="statusGroup_clickHandler(event)">
		<s:Image source="@Embed('assets/usercenter/paint/uploadBtn.png')"/>
		<s:Image source="@Embed('assets/usercenter/paint/cancelBtn.png')"/>
		<s:Image source="@Embed('assets/usercenter/paint/finish.png')"/>
	</s:Group>
</s:Group>
